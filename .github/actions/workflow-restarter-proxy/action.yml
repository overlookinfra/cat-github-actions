---
name: 'Workflow Restarter Proxy'
description: |
  This custom action acts as a proxy to trigger the reusable workflow that restarts a failed job.
  NOTE: This action cannot itself do the re-start because in effect it's composite steps get folded
  into the source workflow, the one that "uses" this custom action.  Since github does not allow a workflow
  to retrigger itself, then the source workflow must be triggered not by this but by another workflow.
  Therefore, this custom action triggers that other workflow.
inputs:
  repository:
    description: 'Should be set to github.repository via the calling workflow'
    required: true
  run_id:
    description: 'Should be set to github.run_id via the calling workflow'
    required: true
runs:
  using: 'composite'
  steps:
    # ABORT if not SOURCE_GITHUB_TOKEN environment variable set
    - name: Check for presence of SOURCE_GITHUB_TOKEN environment variable
      shell: bash
      run: |
        if [[ -z "${{ env.SOURCE_GITHUB_TOKEN }}" ]]; then
          echo "ERROR: \$SOURCE_GITHUB_TOKEN must be set by the calling workflow" 1>&2 && exit 1
        fi

    # checkout the repository because I want bundler to have access to my Gemfile
    - name: Checkout repository
      uses: actions/checkout@v4

    # setup ruby including a bundle install of my Gemfile
    - name: Set up Ruby and install Octokit
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3'
        bundler-cache: true     # 'bundle install' will be run and gems cached for faster workflow runs

    # Trigger the reusable workflow
    - name: Trigger reusable workflow
      shell: bash
      run: |
        gem install octokit
        ruby -e "
        require 'octokit'
        client = Octokit::Client.new(:access_token => '${{ env.SOURCE_GITHUB_TOKEN }}')
        client.post(
          '/repos/${{ inputs.repository }}/actions/workflows/workflow-restarter.yml/dispatches',
          {
            ref: 'main',
            inputs: {
              repo: '${{ inputs.repository }}',
              run_id: '${{ inputs.run_id }}'
            }
          }
        )
        "
